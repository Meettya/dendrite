// Generated by CoffeeScript 1.7.1
(function() {
  var Dendrite, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  _ = require('lodash');


  /*
  **dendrite** - An extended Observer pattern implementation, worked at any JavaScript environment.
  
  @version v0.6.4
  @author Dmitrii Karpich  
  @copyright Dmitrii Karpich (c) 2014 under MIT Licence  
  **GitHub repository** [dendrite](https://github.com/Meettya/dendrite)
  
  Thanks to [Joe Zim](http://www.joezimjs.com) for original [Publish/Subscribe plugin](http://www.joezimjs.com/projects/publish-subscribe-jquery-plugin/) for jQuery
   */

  module.exports = Dendrite = (function() {
    var DEBUG, ERROR, SILENT, WARNING;

    DEBUG = 3;

    WARNING = 2;

    ERROR = 1;

    SILENT = 0;


    /*
    Create a new Dendrite.
    
    @example
      dendrite_obj = new Dendrite verbose : 'warning'
    
    @overload constructor()
      Create new Dendrite with default options
    
    @overload constructor(options)
      Create new Dendrite with settings
      @param [Object] options
      @option options [String] verbose verbose level, may be [ 'debug' | 'warning' | 'error' | 'silent' ]
     */

    function Dendrite(options) {
      if (options == null) {
        options = {};
      }
      this._publishFiring = __bind(this._publishFiring, this);
      this._unsubscribeResume = __bind(this._unsubscribeResume, this);
      this._publisher = __bind(this._publisher, this);
      this._publisherEngine = __bind(this._publisherEngine, this);
      this._parseVerboseLevel = __bind(this._parseVerboseLevel, this);
      this._getNextTaskNumber = __bind(this._getNextTaskNumber, this);
      this._publishingDec = __bind(this._publishingDec, this);
      this._publishingInc = __bind(this._publishingInc, this);
      this._isPublishing = __bind(this._isPublishing, this);
      this._isInternalChannel = __bind(this._isInternalChannel, this);
      this.off = __bind(this.off, this);
      this.on = __bind(this.on, this);
      this.isTopicListened = __bind(this.isTopicListened, this);
      this.getListenedTopicsList = __bind(this.getListenedTopicsList, this);
      this.publishAsync = __bind(this.publishAsync, this);
      this.publishSync = __bind(this.publishSync, this);
      this.publish = __bind(this.publish, this);
      this.unsubscribe = __bind(this.unsubscribe, this);
      this.subscribeGuarded = __bind(this.subscribeGuarded, this);
      this.subscribe = __bind(this.subscribe, this);
      this._subscriptions_ = {};
      this._publishing_counter_ = 0;
      this._unsubscribe_queue_ = [];
      this._tasks_counter_ = 0;
      this._tasks_dictionary_ = [];
      this._internal_bus_name_ = '__DEndr1tE_-_ACtiv1tY_-_bu$__';
      this._observer_verbose_level_ = this._parseVerboseLevel(options != null ? options.verbose : void 0);
    }


    /*
    Subscribe to topic(s).
    
    @note The 'callback' function receives 'topic' [String] as first argument and 'data' [Any] as any data that the publisher sent
    
    @example
      handler = dendrite_obj.subscribe 'foo', (topic, data...) -> console.log data, topic
    
    @overload subscribe(topics, callback)
      Subscribe to topic(s) without context
      @param topics [String] 1 or more topic names, separated by a space, to subscribe to
      @param callback [Function] function to be called when the given topic(s) is published to
      @return [Object]
    
    @overload subscribe(topics, callback, context)
      Subscribe to topic(s) with context
      @param topics [String] 1 or more topic names, separated by a space, to subscribe to
      @param callback [Function] function to be called when the given topic(s) is published to
      @param context [Object] an object to call the function on
      @return [Object]
    
    @return [Object] handler { topics: topics, callback: callback, watchdog: undefined, context: context } or throw exception on invalid arguments
     */

    Dendrite.prototype.subscribe = function(topics, callback, context) {
      if (context == null) {
        context = {};
      }
      return this.subscribeGuarded(topics, callback, void 0, context);
    };


    /*
    Subscribe to topic(s) with 'watchdog' function to handle errors here, in subscriber.
    
    @note The 'callback' function receives 'topic' [String] as first argument and 'data' [Any] as any data that the publisher sent
    
    @note The 'watchdog' function receives two arguments: 'err' [Error] and 'options' [Object] as all 'callback' properties
    
    @example
      context_object = 
        name : 'Context Object'
        callback : (topic, data) -> throw Error "Die at #{topic}"
        watchdog : (err, options) -> 
          console.log "Error in | #{@name} |"
          console.log "Error string: | #{err} |"
          console.log "Error detail", options
          null  
      
      handler = dendrite_obj.subscribeGuarded 'foo', context_object.callback, context_object.watchdog, context_object
    
    @overload subscribeGuarded(topics, callback, watchdog)
      Subscribe with 'watchdog' without context
      @param topics [String] 1 or more topic names, separated by a space, to subscribe to
      @param callback [Function] function to be called when the given topic(s) is published to
      @param watchdog [Function] function to be called when callback under publishing topic rise exception
      @return [Object]
    
    @overload subscribeGuarded(topics, callback, watchdog, context)
      Subscribe with 'watchdog' with context
      @param topics [String] 1 or more topic names, separated by a space, to subscribe to
      @param callback [Function] function to be called when the given topic(s) is published to
      @param watchdog [Function] function to be called when callback under publishing topic rise exception
      @param context [Object] an object to call the function on
      @return [Object]
    
    @see #subscribe
    @return [Object] handler { topics: topics, callback: callback, watchdog: watchdog, context: context } or throw exception on invalid arguments
     */

    Dendrite.prototype.subscribeGuarded = function(topics, callback, watchdog, context) {
      var task_number, topic, _base, _i, _len, _ref;
      if (context == null) {
        context = {};
      }
      if (!(_.isString(topics) || _.isFunction(callback) || ((watchdog == null) || _.isFunction(watchdog)))) {
        throw this._subscribeErrorMessage(topics, callback, watchdog, context);
      }
      task_number = this._getNextTaskNumber();
      this._tasks_dictionary_[task_number] = [callback, context, watchdog];
      _ref = this._topicsToArraySplitter(topics);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        topic = _ref[_i];
        (_base = this._subscriptions_)[topic] || (_base[topic] = []);
        this._subscriptions_[topic].push(task_number);
        if (!this._isInternalChannel(topic)) {
          this.publishAsync("" + this._internal_bus_name_ + ".subscribe", topic);
        }
      }
      return {
        topics: topics,
        callback: callback,
        watchdog: watchdog,
        context: context
      };
    };


    /*
    Unsubscribe from topic(s) or remove all subscribers from topic(s).
    
    @note Unsubscriptions may be placed to queue if Dendrite do some publish tasks  
      and restarted to unsubscribe when all publish tasks is done.
    
    @example
       * unsubscribe 'obj' from topics 'foo bar'
      dendrite_obj.unsubscribe 'foo bar', callback_reference, obj
       * remove all subscribers from topics 'bar baz'
      dendrite_obj.unsubscribe 'bar baz'
    
    @overload unsubscribe(topics)
      Remove **all** subscriptions from topic(s) 
      @param topics [String] 1 or more topic names, separated by a space, to unsubscribe from
      @return [Object]
    
    @overload unsubscribe(topics, callback)
      Remove subscriptions for callback from topic(s) if no context used in the #subscribe() call
      @param topics [String] 1 or more topic names, separated by a space, to unsubscribe from
      @param callback [Function] function to be removed from the topics subscription list
      @return [Object]
    
    @overload unsubscribe(topics, callback, context)
      Remove subscriptions for callback and given context object from topic(s) 
      @param topics [String] 1 or more topic names, separated by a space, to unsubscribe from
      @param callback [Function] function to be removed from the topics subscription list
      @param context [Object] object that was used as the context in the #subscribe() call
      @return [Object]
    
    @overload unsubscribe(handler)
      Remove subscriptions with *handler* object. May be usefully if subscription created with anonymous 'callback' 
      @param [Object] handler subscription handler, returned by #subscribeX() method
      @option handler [String] topics 1 or more topic names, separated by a space, to unsubscribe from
      @option handler [Function] callback function to be removed from the topics subscription list
      @option handler [Object] context object that was used as the context in the #subscribe() call
      @return [Object]
    
    @return [Object]  *this* for chaining
     */

    Dendrite.prototype.unsubscribe = function(topics, callback, context) {
      var idx, task, task_number, topic, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      if (topics.topics) {
        _ref = this._handlerParser(topics, callback, context), topics = _ref[0], callback = _ref[1], context = _ref[2];
      }
      context || (context = {});
      if (!_.isString(topics)) {
        throw this._unsubscribeErrorMessage(topics, callback, context);
      }
      if (this._isPublishing()) {
        this._unsubscribe_queue_.push([topics, callback, context]);
        return this;
      }

      /*
      IMPORTANT! Yes, we are remove subscriptions ONLY, 
      and keep tasks_dictionary untouched because its not necessary.
      Dictionary compacted, calculations of links to dictionary from subscriptions
      may be nightmare - its like pointers in C, exceptionally funny in async mode. 
      So, who get f*ck about this? Not me!!!
       */
      _ref1 = this._topicsToArraySplitter(topics);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        topic = _ref1[_i];
        if (_.isFunction(callback)) {
          _ref2 = this._subscriptions_[topic];
          for (idx = _j = 0, _len1 = _ref2.length; _j < _len1; idx = ++_j) {
            task_number = _ref2[idx];
            if (task = this._tasks_dictionary_[task_number]) {
              if (_.isEqual([task[0], task[1]], [callback, context])) {
                this._subscriptions_[topic].splice(idx, 1);
              }
            }
          }
        } else {
          delete this._subscriptions_[topic];
        }
        if (!this._isInternalChannel(topic)) {
          this.publishAsync("" + this._internal_bus_name_ + ".unsubscribe", topic);
        }
      }
      return this;
    };


    /*
    Synchronously publish any data to topic(s).
    
    @example
      dendrite_obj.publish 'foo bar', 'This is some data'
    
    @overload publish(topics)
      Do publish to topics without any data
      @param topics [String] 1 or more topic names, separated by a space, to publish to
      @return [Object]
    
    @overload publish(topics, data...)
      Do publish with some data to topics
      @param topics [String] 1 or more topic names, separated by a space, to publish to
      @param data [Any] any kind of data(s) you wish to give to the subscribers
      @return [Object]
    
    @return [Object] *this* for chaining
     */

    Dendrite.prototype.publish = function() {
      var data, topics;
      topics = arguments[0], data = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this._publisher('sync', topics, data);
      return this;
    };


    /*
    Alias for {#publish}
    @return [Object] *this* for chaining
     */

    Dendrite.prototype.publishSync = function() {
      var data, topics;
      topics = arguments[0], data = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this._publisher('sync', topics, data);
      return this;
    };


    /*
    Asynchronously publish any data to topic(s).
    
    @note Used exactly as {#publish}, but this method puts task to queue and will returns immediately 
    
    @example
      dendrite_obj.publishAsync 'foo bar', 'This is some data'
    
    See {#publish} for all info
    @return [Object] *this* for chaining
     */

    Dendrite.prototype.publishAsync = function() {
      var data, topics;
      topics = arguments[0], data = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this._publisher('async', topics, data);
      return this;
    };


    /*
    Get list of all topic(s) with listeners
    
    @example
      dendrite_obj.getListenedTopicsList()
    
    See {#publish} for all info
    @return [Array] list of all listened topics
     */

    Dendrite.prototype.getListenedTopicsList = function() {
      var listiners, topic, _ref, _results;
      _ref = this._subscriptions_;
      _results = [];
      for (topic in _ref) {
        listiners = _ref[topic];
        if (listiners.length && !this._isInternalChannel(topic)) {
          _results.push(topic);
        }
      }
      return _results;
    };


    /*
    Return is topic listened or not
    
    @example
      dendrite_obj.isTopicListened 'foo'
    
    @return [Boolean] true if topic listened, false otherwise
     */

    Dendrite.prototype.isTopicListened = function(topic) {
      var _ref, _ref1;
      if (!_.isString(topic) || topic === '') {
        throw this._isTopicListenedErrorMessage(topic, 'isTopicListened', 'topic');
      }
      return !!((_ref = this._subscriptions_) != null ? (_ref1 = _ref[topic]) != null ? _ref1.length : void 0 : void 0);
    };


    /*
    Attach listeners on Dendrite object directly, to watch subscribe\unsubscribe activity
    
    @example
      dendrite_obj.on 'subscribe', (topic) -> 
        console.log topic # where 'topic' - name of channel (topic) where activity appear 
    
    @return [Object] handler { topics: topics, callback: callback, watchdog: undefined, context: context } or throw exception on invalid arguments
     */

    Dendrite.prototype.on = function(activity_type, callback) {
      var lc_activity_type;
      if (!_.isString(activity_type) || activity_type === '') {
        throw this._isTopicListenedErrorMessage(activity_type, 'on', 'activity type');
      }
      if (!_.isFunction(callback)) {
        throw TypeError("callback is not function");
      }
      switch (lc_activity_type = activity_type.toLowerCase()) {
        case 'subscribe':
        case 'unsubscribe':
          return this.subscribe("" + this._internal_bus_name_ + "." + lc_activity_type, function(topic, data) {
            return callback(data);
          });
        default:
          throw Error("unknown activity type |" + activity_type + "|");
      }
    };


    /*
    Detach listeners from Dendrite object directly, to unwatch subscribe\unsubscribe activity
    
    @example
      dendrite_obj.off 'subscribe'
      dendrite_obj.off handler
    
    @overload off(topic)
      Remove **all** subscriptions from topic
      @param topic String topic names, separated by a space, to off from
      @return [Object]
    
    @overload off(handler)
      Remove subscriptions with *handler* object for one listener
      @param [Object] handler subscription handler, returned by #on() method
      @option handler [String] topics 1 or more topic names, separated by a space, to unsubscribe from
      @option handler [Function] callback function to be removed from the topics subscription list
      @option handler [Object] context object that was used as the context in the #subscribe() call
      @return [Object]
    
    @return [Object] handler { topics: topics, callback: callback, watchdog: undefined, context: context } or throw exception on invalid arguments
     */

    Dendrite.prototype.off = function(topic) {
      var callback, context, lc_topic, _ref;
      if (topic != null ? topic.topics : void 0) {
        _ref = this._handlerParser(topic), topic = _ref[0], callback = _ref[1], context = _ref[2];
      } else {
        lc_topic = "" + this._internal_bus_name_ + "." + (topic != null ? topic.toLowerCase() : void 0);
      }
      if (!_.isString(topic) || topic === '') {
        throw this._isTopicListenedErrorMessage(topic, 'off', 'activity type');
      }
      context || (context = {});
      return this.unsubscribe(lc_topic != null ? lc_topic : topic, callback, context);
    };


    /*  
          ******  ******  *** *     *    *    ******* ******* 
          *     * *     *  *  *     *   * *      *    *       
          *     * *     *  *  *     *  *   *     *    *       
          ******  ******   *  *     * *     *    *    *****   
          *       *   *    *   *   *  *******    *    *       
          *       *    *   *    * *   *     *    *    *       
          *       *     * ***    *    *     *    *    *******
     */


    /*
    Find out is it internal channel or not
    @private
    @return [Boolean] true internal, false otherwise
     */

    Dendrite.prototype._isInternalChannel = function(topic) {
      return 0 === topic.indexOf("" + this._internal_bus_name_ + ".");
    };


    /*
    Self-incapsulate @_publishing_counter_ properties to internal methods
    @private
    @return [Boolean] true if Dendrite is publishing, false is idle
     */

    Dendrite.prototype._isPublishing = function() {
      return !!this._publishing_counter_;
    };


    /*
    Self-incapsulate @_publishing_counter_ properties to internal methods
    @private
     */

    Dendrite.prototype._publishingInc = function() {
      this._publishing_counter_ += 1;
      return null;
    };


    /*
    Self-incapsulate @_publishing_counter_ properties to internal methods
    @private
     */

    Dendrite.prototype._publishingDec = function() {
      if (!this._isPublishing) {
        throw Error("Error on decrement publishing counter\n  @_publishing_counter_ is |" + this._publishing_counter_ + "|");
      }
      this._publishing_counter_ -= 1;
      return null;
    };


    /*
    Self-incapsulated task auto-incremented counter
    @private
    @return [Integer] unique task number
     */

    Dendrite.prototype._getNextTaskNumber = function() {
      return this._tasks_counter_ += 1;
    };


    /*
    Verbose level args parser
    @private
    @param level [String] verbose level name
    @return [Integer] verbose level
     */

    Dendrite.prototype._parseVerboseLevel = function(level) {
      if (level == null) {
        return ERROR;
      }
      if (!_.isString(level)) {
        throw this._parseVerboseLevelError(level);
      }
      switch (level.toUpperCase()) {
        case "DEBUG":
          return DEBUG;
        case "SILENT":
          return SILENT;
        case "ERROR":
          return ERROR;
        case "WARNING":
          return WARNING;
        default:
          throw Error("unknown verbose level |" + level + "|");
      }
    };


    /*
    Internal method for different events types definitions
    @private
    @param type [String] engine type name
    @return [Array<publish, unsubscribe>] engine or throw exception on invalid arguments
     */

    Dendrite.prototype._publisherEngine = function(type) {
      var engine_dictionary, selected_engine, self;
      self = this;
      engine_dictionary = {
        sync: {
          publish: self._publishFiring,
          unsubscribe: self._unsubscribeResume
        },
        async: {
          publish: function(topic, task, data) {
            return setTimeout((function() {
              return self._publishFiring(topic, task, data);
            }), 0);
          },
          unsubscribe: function() {
            return setTimeout((function() {
              return self._unsubscribeResume();
            }), 0);
          }
        }
      };
      selected_engine = engine_dictionary[type];
      if (selected_engine == null) {
        throw TypeError("Error undefined publisher engine type |" + type + "|");
      }
      return [selected_engine.publish, selected_engine.unsubscribe];
    };


    /*
    Publisher itself
    @private
    @param type [String] engine type name
    @param topics [String] topic names
    @param data [Array] any kind of data(s)
     */

    Dendrite.prototype._publisher = function(type, topics, data) {
      var task_number, topic, _i, _j, _len, _len1, _publish, _ref, _ref1, _ref2, _unsubscribe;
      if (!_.isString(topics)) {
        throw this._publishErrorMessage(topics, data);
      }
      _ref = this._publisherEngine(type), _publish = _ref[0], _unsubscribe = _ref[1];
      _ref1 = this._topicsToArraySplitter(topics, false);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        topic = _ref1[_i];
        if (this._subscriptions_[topic]) {
          _ref2 = this._subscriptions_[topic];
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            task_number = _ref2[_j];
            this._publishingInc();
            _publish.call(this, topic, this._tasks_dictionary_[task_number], data);
          }
        }
      }
      _unsubscribe.call(this);
      return null;
    };


    /*
    Internal method for splitting topics string to array.
    @note May skip duplicate (it used for un/subscription )
    @private
    @param topics [String] topic names
    @param skip_duplicate [Boolean] *optional* is it needed to skip duplicate?
    @return [Array<topics>] individual topics
     */

    Dendrite.prototype._topicsToArraySplitter = function(topics, skip_duplicate) {
      var topic, used_topics, _i, _len, _ref, _results;
      if (skip_duplicate == null) {
        skip_duplicate = true;
      }
      used_topics = {};
      _ref = topics.split(' ');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        topic = _ref[_i];
        if (!(topic !== '')) {
          continue;
        }
        if (skip_duplicate && used_topics[topic]) {
          continue;
        }
        used_topics[topic] = true;
        _results.push(topic);
      }
      return _results;
    };


    /*
    Internal method for handler parser
    @private
    @param handler [Object] handler
    @param callback [Function] *optional*
    @param context [Object] *optional*
    @return [Array<topics, callback, context>] parsed handler
     */

    Dendrite.prototype._handlerParser = function(handler, callback, context) {
      var topics;
      callback || (callback = handler.callback);
      context || (context = handler.context);
      topics = handler.topics;
      return [topics, callback, context];
    };


    /*
    Internal method for unsubscribe continue
    @private
     */

    Dendrite.prototype._unsubscribeResume = function() {
      var task, _base;
      if (!this._unsubscribe_queue_.length) {
        return;
      }
      if (this._isPublishing()) {
        if (this._observer_verbose_level_ >= DEBUG) {
          if (typeof console !== "undefined" && console !== null) {
            console.log('still publishing');
          }
        }
        return;
      }
      while (task = typeof (_base = this._unsubscribe_queue_).shift === "function" ? _base.shift() : void 0) {
        if (this._observer_verbose_level_ >= DEBUG) {
          if (typeof console !== "undefined" && console !== null) {
            console.log("retry unsubscribe " + task);
          }
        }
        this.unsubscribe.apply(this, task);
      }
      return null;
    };


    /*
    Internal method for publish firing
    @private
     */

    Dendrite.prototype._publishFiring = function(topic, task, data) {
      var err, _ref;
      try {
        task[0].apply(task[1], [topic].concat(data));
      } catch (_error) {
        err = _error;
        if ((_ref = task[2]) != null) {
          _ref.call(task[1], err, {
            topic: topic,
            callback: task[0],
            object: task[1],
            data: data
          });
        }
        if (this._observer_verbose_level_ >= ERROR) {
          if (typeof console !== "undefined" && console !== null) {
            console.error("Error on call callback we got exception:\n  topic     = |" + topic + "|\n  callback  = |" + task[0] + "|\n  watchdog  = |" + task[2] + "|\n  object    = |" + task[1] + "|\n  data      = |" + (data != null ? data.join(', ') : void 0) + "|\n  error     = |" + err + "|");
          }
        }
      } finally {
        this._publishingDec();
      }
      return null;
    };


    /*
    Internal method for publish error message about non-string topic
    @private
    @return [Object] Error
     */

    Dendrite.prototype._isTopicListenedErrorMessage = function(topic, function_name, channel_name) {
      return new TypeError("Error on call |" + function_name + "| used non-string, or empty string as " + channel_name + ":\n  " + channel_name + "  = |" + topic + "|");
    };


    /*
    Internal method for publish error message constructor
    @private
    @return [Object] Error
     */

    Dendrite.prototype._publishErrorMessage = function(topics, data) {
      return new TypeError("Error on call |publish| used non-string topics:\n  topics  = |" + topics + "|\n  data    = |" + (data != null ? data.join(', ') : void 0) + "|");
    };


    /*
    Internal method for unsubscribe error message constructor
    @private
    @return [Object] Error
     */

    Dendrite.prototype._unsubscribeErrorMessage = function(topics, callback, context) {
      return new TypeError("Error on call |unsubscribe| used non-string topics:\n  topics    = |" + topics + "|\n  callback  = |" + callback + "|\n  context   = |" + context + "|");
    };


    /*  
    Internal method for subscribe error message constructor
    @private
    @return [Object] Error
     */

    Dendrite.prototype._subscribeErrorMessage = function(topics, callback, watchdog, context) {
      return new TypeError("Error! on call |subscribe| used non-string topics OR/AND callback isn`t function OR/AND watchdog defined but isn`t function:\n  topics    = |" + topics + "|\n  callback  = |" + callback + "|\n  watchdog  = |" + watchdog + "|\n  context   = |" + context + "|");
    };


    /*
    Internal method for error message from verbose level parser
    @private
    @return [Object] Error
     */

    Dendrite.prototype._parseVerboseLevelError = function(level) {
      return new TypeError("Error on parsing verbose level - not a String |" + level + "|");
    };

    return Dendrite;

  })();

}).call(this);
